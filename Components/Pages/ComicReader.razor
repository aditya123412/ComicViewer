@page "/"
@inject IJSRuntime JS;
@using HtmlAgilityPack;
@using ComicViewer;
@using System.Text.Json;
@using Fizzler.Systems.HtmlAgilityPack;

<div style="overflow-x:scroll;height:150px;">
    <table @ref="comicsListView" style="overflow-x:scroll">
        <tbody>
            <tr>
                @foreach (var _comic in comicsList)
                {
                    <td style="/* background-image:url(@_comic.LogoImageFileName);  */width:120px; height:120px;border: 2px double black; border-radius:5px;" @onclick="async ()=>{ host=_comic.Type; await Navigate(_comic.CurrentComic, _comic.Name); comicPanZoom?.ResetAsync();}">
                        @if (!string.IsNullOrEmpty(_comic.LogoImageFileName))
                        {
                            <img src="@_comic.LogoImageFileName" alt="@_comic.Name" style="height:90px;width:120px;display:block" />
                        }
                        <p style="width:120px;height:30px;display:block">@_comic.Name</p>
                    </td>
                }
            </tr>
        </tbody>
    </table>
</div>
<br />
@if (comic != null && !string.IsNullOrEmpty(comic.imageUrl))
{
    <div class="comic-container" style="display:block">
        <h3 style="justify-self:center">@comic.Title</h3><button @onclick="()=>{ RemoveComic(comic.Name);}" class="btn-close" style="align-self:flex-end;float:right"></button>
        <br />
        <div>
            <table class="nav-bar" style="width:100%">
                <tr>
                    <td>
                        <button class="nav-button" @onclick="async ()=>{await Navigate(comic.firstURL, comic.Name); await comicPanZoom.ResetAsync();}" disabled="@string.IsNullOrEmpty(comic.firstURL)">First</button>
                        </td>
                    <td>
                        <button class="nav-button" @onclick="async ()=>{await Navigate(comic.prevURL, comic.Name); await comicPanZoom.ResetAsync();}" disabled="@string.IsNullOrEmpty(comic.prevURL)">Previous</button>
                    </td>
                    <td>
                        <button class="nav-button" @onclick="async ()=>{await Navigate(comic.randomURL, comic.Name); await comicPanZoom.ResetAsync();}" disabled="@string.IsNullOrEmpty(comic.randomURL)">Random</button>
                    </td>
                    <td>
                        <button class="nav-button" @onclick="async ()=>{await Navigate(comic.nextURL, comic.Name); await comicPanZoom.ResetAsync();}" disabled="@string.IsNullOrEmpty(comic.nextURL)">Next</button>
                    </td>
                    <td>
                        <button class="nav-button" @onclick="async ()=>{await Navigate(comic.lastURL, comic.Name); await comicPanZoom.ResetAsync();}" disabled="@string.IsNullOrEmpty(comic.lastURL)">Last</button>
                    </td>
                </tr>
                <tr>
                    <td></td>
                    <td><button >Download</button></td>
                    <td><button @onclick="async()=>{await comicPanZoom.ResetAsync();}">Center Image</button></td>
                    <td><button>Share</button></td>
                    <td></td>
                </tr>
            </table>

            <br />
            @try
            {
                <div style="width:100%;align-content:center;height:500px" @ondblclick="()=>{comicPanZoom.ZoomAsync(zoom[zoomLevel]); zoomLevel = (++zoomLevel)%zoom.Length;}">
                    <Panzoom @ref="comicPanZoom" PanzoomOptions="@(new PanzoomOptions {Canvas = true, Overflow = Overflow.Visible})" WheelMode="@WheelMode.ZoomWithWheel" >
                        <img @ref="@context.ElementReference" src="@comic.imageUrl" class="comic" @ondblclick="()=>{comicPanZoom.ZoomAsync(zoom[zoomLevel]); zoomLevel = (++zoomLevel)%zoom.Length;}" />
                    </Panzoom>
                </div>
            }
            catch (Exception e)
            {
                <h4>@e.Message</h4>
                <h5>@e.InnerException</h5>
                <p>@e.StackTrace??.ToString()</p>
            }            
        </div>

        <br />
        @if (!string.IsNullOrEmpty(comic.hiddenImageUrl))
        {
            @* <Panzoom @ref="hiddenComicPanZoom" PanzoomOptions="@(new PanzoomOptions {Canvas = true})" WheelMode="@WheelMode.ZoomWithWheel"> *@
            <img src="@comic.hiddenImageUrl" class="comic" style="max-width:400px" />
            @* </Panzoom> *@
        }
    </div>
}

@code {
    private List<Comic> comicsList = new List<Comic>();
    private ComicView comic;
    private string host;
    private double[] zoom = [1, 2, 3];
    private int zoomLevel = 0;
    private ElementReference comicsListView;
    private Panzoom comicPanZoom = new Panzoom();
    private Panzoom hiddenComicPanZoom = new Panzoom();

    [SupplyParameterFromQuery]
    private int index { get; set; } = 0;
    private string comicsFile = Path.Combine(FileSystem.Current.AppDataDirectory, "comics.json");
    // private string comicsFile = "comics.json";


    protected override async Task OnInitializedAsync()
    {
        if (File.Exists(comicsFile))
        {
            comicsList = JsonSerializer.Deserialize<List<Comic>>(File.ReadAllText(comicsFile));
        }
        else
        {
            comicsList = new List<Comic>();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // await JS.InvokeVoidAsync("hammerIt", comicsListView);
        }
    }
    public void clicked(object o, object e)
    {

    }
    public void Download(string comicImageUrl)
    {
        using(var client = new HttpClient())
        {
            var st = client.GetByteArrayAsync(comicImageUrl).Result;
            File.WriteAllBytes(Path.Combine(FileSystem.Current.AppDataDirectory, "comic.jpg"), st);
        }
    }
    public async Task Navigate(string url, string comicName)
    {
        try
        {
            using (HttpClient client = new HttpClient()) // WebClient class inherits IDisposable
            {
                string htmlCode = await client.GetStringAsync(url);
                HtmlDocument doc = new HtmlDocument();
                doc.LoadHtml(htmlCode);
                var comicCode = ComicCodes.Codes.FirstOrDefault(x => x.Filter(url));
                if (comicCode != null)
                {
                    comic = comicCode.GetComicView(doc, host, comicName);
                    UpdateCurrentComicDate(comicName, url);
                }
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            throw;
        }
    }

    public void UpdateCurrentComicDate(string comicName, string url)
    {
        try
        {
            comicsList.First(x => x.Name == comicName).CurrentComic = url;
            File.WriteAllText(comicsFile, JsonSerializer.Serialize(comicsList));
        }
        catch (Exception e)
        {

        }
    }

    public void RemoveComic(string comicName)
    {
        try
        {
            comicsList = comicsList.Where(x => x.Name != comicName).ToList();
            File.WriteAllText(comicsFile, JsonSerializer.Serialize(comicsList));
        }
        catch (Exception e)
        {

        }
    }
}
